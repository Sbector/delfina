{"version":3,"sources":["components/Model.jsx","App.jsx","index.js"],"names":["Model","mountRef","useRef","useEffect","currentRef","current","width","clientWidth","height","clientHeight","scene","THREE","background","camera","position","set","add","renderer","antialias","setSize","setPixelRatio","window","devicePixelRatio","appendChild","domElement","controls","OrbitControls","enableDamping","enablePan","minDistance","maxDistance","geometry","material","color","cube","light","ambient","lookAt","clock","stats","Stats","document","body","dom","resize","updatedWidth","updatedHeight","aspect","updateProjectionMatrix","addEventListener","animate","update","elapsedTime","getElapsedTime","rotation","y","x","Math","sin","cos","render","requestAnimationFrame","removeChild","removeEventListener","ref","style","App","ReactDOM","StrictMode","getElementById"],"mappings":"wMAmFeA,EA7ED,WACZ,IAAMC,EAAWC,iBAAO,MAyExB,OAvEAC,qBAAU,WACR,IAAMC,EAAaH,EAASI,QACPC,EAAgCF,EAA7CG,YAAkCC,EAAWJ,EAAzBK,aAEtBC,EAAQ,IAAIC,IAClBD,EAAME,WAAa,IAAID,IAAY,UACnC,IAAME,EAAS,IAAIF,IAAwB,GAAIL,EAAQE,EAAQ,IAAM,KACrEK,EAAOC,SAASC,IAAI,GAAG,GAAG,IAC1BL,EAAMM,IAAIH,GAEV,IAAMI,EAAW,IAAIN,IAAoB,CAACO,WAAU,IACpDD,EAASE,QAAQb,EAAOE,GACxBS,EAASG,cAAcC,OAAOC,kBAC9BlB,EAAWmB,YAAYN,EAASO,YAEhC,IAAMC,EAAW,IAAIC,IAAcb,EAAQI,EAASO,YACpDC,EAASE,eAAgB,EACzBF,EAASG,WAAY,EACrBH,EAASI,YAAc,GACvBJ,EAASK,YAAc,GAEvB,IAAMC,EAAW,IAAIpB,IAAkB,EAAG,EAAG,GACvCqB,EAAW,IAAIrB,IAAwB,CAAEsB,MAAO,WAChDC,EAAO,IAAIvB,IAAWoB,EAAUC,GACtCtB,EAAMM,IAAIkB,GAEV,IAAMC,EAAQ,IAAIxB,IAAiB,SAAS,EAAE,IAC9CwB,EAAMrB,SAASC,IAAI,EAAE,EAAE,GACvBL,EAAMM,IAAImB,GAEV,IAAMC,EAAU,IAAIzB,IAAmB,SAAS,GAChDD,EAAMM,IAAIoB,GAEVvB,EAAOwB,OAAOH,EAAKpB,UAEnB,IAAMwB,EAAQ,IAAI3B,IAEZ4B,EAAQC,cACdC,SAASC,KAAKnB,YAAYgB,EAAMI,KAEhC,IAaMC,EAAS,WACX,IAAMC,EAAezC,EAAWG,YAC1BuC,EAAgB1C,EAAWK,aACjCQ,EAASE,QAAQ0B,EAAcC,GAC/BjC,EAAOkC,OAASF,EAAeC,EAC/BjC,EAAOmC,0BAMX,OAJA3B,OAAO4B,iBAAiB,SAASL,GApBjB,SAAVM,IACJX,EAAMY,SACN,IAAMC,EAAcd,EAAMe,iBAAiB,EAC3CnB,EAAKoB,SAASC,EAAIH,EAClBlB,EAAKoB,SAASE,EAAIJ,EAClBlB,EAAKpB,SAASyC,EAA0B,EAAtBE,KAAKC,IAAIN,GAC3BlB,EAAKpB,SAAS0C,EAA0B,EAAtBC,KAAKE,IAAIP,GAE3B3B,EAAS0B,SACTlC,EAAS2C,OAAOlD,EAAOG,GACvBgD,sBAAsBX,GAYxBA,GAEO,WACL9C,EAAW0D,YAAY7C,EAASO,YAChCiB,SAASC,KAAKoB,YAAYvB,EAAMI,KAChCtB,OAAO0C,oBAAoB,SAAUnB,MAEtC,IAEI,qBAAKoB,IAAK/D,EAAUgE,MAAO,CAAE3D,MAAO,OAAQE,OAAQ,YCpE9C0D,MARf,WACE,OACE,mCACE,cAAC,EAAD,OCFNC,IAASP,OACP,cAAC,IAAMQ,WAAP,UACE,cAAC,EAAD,MAEF3B,SAAS4B,eAAe,W","file":"static/js/main.68fb8988.chunk.js","sourcesContent":["import { useRef, useEffect } from \"react\";\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nimport Stats from \"three/examples/jsm/libs/stats.module\";\r\n\r\nconst Model = () => {\r\n  const mountRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    const currentRef = mountRef.current;\r\n    const { clientWidth: width, clientHeight: height } = currentRef;\r\n\r\n    const scene = new THREE.Scene();\r\n    scene.background = new THREE.Color(0xeafffa);\r\n    const camera = new THREE.PerspectiveCamera(25, width / height, 0.01, 1000);\r\n    camera.position.set(10,10,10);\r\n    scene.add(camera);\r\n\r\n    const renderer = new THREE.WebGLRenderer({antialias:true});\r\n    renderer.setSize(width, height);\r\n    renderer.setPixelRatio(window.devicePixelRatio);\r\n    currentRef.appendChild(renderer.domElement);\r\n\r\n    const controls = new OrbitControls(camera, renderer.domElement);\r\n    controls.enableDamping = true;\r\n    controls.enablePan = false;\r\n    controls.minDistance = 15;\r\n    controls.maxDistance = 25;\r\n\r\n    const geometry = new THREE.BoxGeometry(1, 2, 1);\r\n    const material = new THREE.MeshPhongMaterial({ color: 0xaa88ff });\r\n    const cube = new THREE.Mesh(geometry, material);\r\n    scene.add(cube);\r\n\r\n    const light = new THREE.PointLight(0xff0000,1,50);\r\n    light.position.set(0,0,0);\r\n    scene.add(light);\r\n\r\n    const ambient = new THREE.AmbientLight(0xffffff,1);\r\n    scene.add(ambient);\r\n\r\n    camera.lookAt(cube.position);\r\n\r\n    const clock = new THREE.Clock();\r\n\r\n    const stats = Stats();\r\n    document.body.appendChild(stats.dom);\r\n\r\n    const animate = () => {\r\n      stats.update();\r\n      const elapsedTime = clock.getElapsedTime()/5;\r\n      cube.rotation.y = elapsedTime;\r\n      cube.rotation.x = elapsedTime;\r\n      cube.position.y = Math.sin(elapsedTime)*2;\r\n      cube.position.x = Math.cos(elapsedTime)*1;\r\n      //console.log(elapsedTime);\r\n      controls.update();\r\n      renderer.render(scene, camera);\r\n      requestAnimationFrame(animate);\r\n    };\r\n\r\n    const resize = () =>{\r\n        const updatedWidth = currentRef.clientWidth;\r\n        const updatedHeight = currentRef.clientHeight;\r\n        renderer.setSize(updatedWidth, updatedHeight);\r\n        camera.aspect = updatedWidth / updatedHeight;\r\n        camera.updateProjectionMatrix();\r\n    };\r\n    window.addEventListener(\"resize\",resize)\r\n\r\n    animate();\r\n\r\n    return () => {\r\n      currentRef.removeChild(renderer.domElement);\r\n      document.body.removeChild(stats.dom);\r\n      window.removeEventListener(\"resize\", resize);\r\n    };\r\n  }, []);\r\n\r\n  return <div ref={mountRef} style={{ width: \"100%\", height: \"100vh\" }}></div>;\r\n};\r\n\r\nexport default Model;","import Model from \"./components/Model\";\n\n\n\nfunction App() {\n  return (\n    <>\n      <Model/>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}